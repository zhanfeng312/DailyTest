使用c++方式写qt的代码
1. 类继承自QWidget或者子类
    QDialog
    QMainWindow
2. 界面中的组件 都作为这个类的成员变量
3. 类的头文件和实现文件 必须分离
4. 如果类中有自定义的信号和槽  则
   需要在类的头文件中加一个宏 Q_OBJECT

--------------------------------------------------
信号 和 槽

关联两个 不相关的对象
connect (const QObject *sender,
         const char* signal,
         const QObject* reciver,
         const char* method);
connect(a,SIGNAL(test()), c, SLOT(gg()));

connect(a, SIGNAL(test()), d, SIGNAL(g()));
connect(d, SIGNAL(g()), f, SLOT(m()));

不是所有的信号 和 所有的槽 都能直接进行连接
1. 采用自定义槽函数  在自定义的槽函数中
调用和信号不匹配的槽函数
  信号和槽的参数的类型 个数 顺序

2. 自定义的槽函数  结合自定义信号
connect(a, SIGNAL(clicked()), this, SLOT(z()));

在z()槽函数中 没有访问目标的槽函数
而是发射了信号 这个信号是定义的 和
目标的槽函数是匹配的

关联自定义信号 和 目标的槽函数

------------------------------------------------

设计器的使用
   简化了界面相关的代码
    1. 设计一个ui 界面
      托拽  修改对象的名字 和 相关的属性

    2. 如何使用ui界面
     a. 使用uic 把 ui转换成 .h
     b. 写自己的.h文件
     c. 写实现代码
     d. 写测试代码


-------------------------------------------------
定时器 
   QTimer   可以定时的发出 timeout()信
绘制事件处理函数
定时器事件处理函数

鼠标事件处理函数
键盘事件处理函数
------------------------------------------
贪吃蛇

食物   QLabel* 动态的
蛇     QList<QLabel*>
方向   枚举enum
歩长   int 
定时器  定时器事件处理 (定时处理)
最大长度  int 

功能
 控制蛇的方向  (键盘事件处理函数)
 控制蛇的移动  (槽函数)
 产生新的食物  

